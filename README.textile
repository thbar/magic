Magic is an IronRuby gem making it easier to develop Windows Forms and Silverlight UI with IronRuby.

Note that while developing it, it quickly became clear that Magic could be useful outside IronRuby and Windows Forms in the very near future (look at IDEAS to see where we're heading).

h1. USAGE

h2. Windows Forms

Here's a quick starter:

	form = Magic.build do
	  @menu = main_menu do
	    menu_item("&File") do
	      menu_item("&New")
	      menu_item("&Quit").click { Application.Exit }
	      menu_item("&Other Quit", :click => lambda { Application.Exit })
	    end
	  end
	  form(:text => "Title", :menu => @menu) do
	    flow_layout_panel(:dock => :fill) do
	      button(:text => "Click me!").click do
	        MessageBox.Show("Hello from button!")
	      end
	    end
	  end
	end

h2. Silverlight

Support has just been added. You'll need to run "rake compress" to create magic-compressed.rb, which gathers all the magic files into one. I didn't find a way yet to use the gem as-is.

Once you have magic-compressed.rb, you can use it like that:

	require "silverlight"
	require "magic-compressed"

	class App < SilverlightApplication
 
	  def initialize
	    application.root_visual = Magic.build do
	      stack_panel do
	        10.times { |i| text_block(:text => i.to_s, :width => 30,:height => 30) }
	      end
	    end
	  end
	end

	$app = App.new

It makes it easy to create XAML-free applications, or to reduce the amount of XAML to be created.

h1. UNDER THE COVER

A few points (see spec/magic_spec.rb for details):

* classes to be built are inferred from method calls (converted from snake_case to CamelCase)
** menu_item creates an instance of MenuItem
** button becomes Button
** flow_layout_panel becomes FlowLayoutPanel
* method calls automatically add the object to its parent children collection (if the object is a Control, a MenuItem or a UIElement - this will become configurable)
* if a Hash is passed, corresponding properties are set after instanciation (:text => "This is the text")
* if the property is an enum, snake_case symbol value is allowed (:dock => :fill is the same as :dock => DockStyle.Fill)
* handlers are registered if a lambda is passed (:click => lambda)
* handlers can also be registered by calling the block directly (button.lambda do ... end)
* instance variables can be reused (form.menu = @menu)
* non-control (like BackgroundWorker for long-running operations) instances can be created (worker = background_worker)
* the last evaluted expression is returned.

h1. TESTING

Magic comes with its set of specs (based on MSpec). You'll currently have to tweak Rakefile (see spec task) to match your environment. Then you can run:

  rake spec

to see all the (m)specs running.

Note that I currently use a few nasty mocks (see mocks.rb) that I'll need to clean-up.

h1. IDEAS

* build a website to make it easier to discover and understand
* become independent of Windows Forms (see Magic.method_missing for notes about that)
* use it to generate graphs with QuickGraph
* use it outside IronRuby (the coupling to IronRuby is quite isolated)

h1. COPYRIGHT

Copyright (c) 2008 Thibaut Barr√®re. See LICENSE for details.
